/*
 * sones GraphDB - OpenSource Graph Database - http://www.sones.com
 * Copyright (C) 2007-2011 sones GmbH
 *
 * This file is part of sones GraphDB OpenSource Edition.
 *
 * sones GraphDB OSE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * sones GraphDB OSE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with sones GraphDB OSE. If not, see <http://www.gnu.org/licenses/>.
 */
 
<%@ jet 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.Map
		java.util.HashMap
		java.util.List
		java.util.ArrayList
	" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
%> 

class Sones_<%=cid%>
{
	/**
	 * To successivly build the insert statement
	 */
	private StringBuilder insert =  new StringBuilder();
		
	/**
	 * To temp. store the attribute names
	 */
	private java.util.ArrayList<String> tmpAttrNames = new java.util.ArrayList<String>();	
	
		
	/**
     * Reset the INSERT statement by beginning with INSERT INTO
     */	 
	public void resetInsertStmt()
	{
		this.insert = new StringBuilder("INSERT INTO ");
		this.tmpAttrNames = new java.util.ArrayList<String>();
	}
	
	/**
	 * Get the choosen vertex type and then append it to the INSERT statement
	 */
	public void setInsertStmtVertexType()
	{
		<%
		String vertexType = ElementParameterParser.getValue(node, "__VERTEXTYPE__");
		%>
	
		this.insert.append("<%=vertexType%>");
	}
	
	/**
	 * Get the number of attributes and decide based on it how the attribute name and value should be appended to the INSERT statement.
	 */
	public void addInsertStmtAttr(String attrName, String attrVal, String type)
	{
		<%	
		int numOfAttr = 0;
		
		List<IMetadataTable> metadatas = node.getMetadataList();
		
		if ((metadatas!=null)&&(metadatas.size()>0)) {
		
			IMetadataTable metadata = metadatas.get(0);
			
			numOfAttr = metadata.getListColumns().size();	
		}			
		%>
		
		int numOfAttr = <%=numOfAttr%>; 
	
		this.tmpAttrNames.add(attrName);
		

		if (tmpAttrNames.size()==1)
		{
			insert.append(" VALUES" + " (");
		}
		
		if (attrVal != null)
		{
			if (tmpAttrNames.size()==1)
			{
				insert.append(attrName + "=" + litAttrVal(attrVal, type));
			}
			else
			{
				insert.append(", " + attrName + "=" + litAttrVal(attrVal, type));
			}
		}
		
		if (tmpAttrNames.size()==numOfAttr)
		{
			insert.append(")");
		}
	}
	
	/**
	 * Encapsulate the given attribute value by the right literals.
	 */
	private String litAttrVal(String attrVal, String type)
	{	
		String quote = new de.sones.talend.helper.TypeHelper().getTypeToLitMap.get(type);
	
		return  qoute + attrVal + quote;
	}
	
	/**
	 * Print the INSERT statement
	 */ 
	public void printInsert()
	{
		String insertStr = this.insert.toString();
		
		System.out.println(insertStr);
	}
	
	/**
	 * Perform the INSERT statement
	 */
	public void doInsert()
	{
		String insertStr = this.insert.toString();
		
		<%		
		String host = ElementParameterParser.getValue(node, "__HOST__");
		String port = ElementParameterParser.getValue(node, "__PORT__");
		String db =   ElementParameterParser.getValue(node, "__DBNAME__");
		String user = ElementParameterParser.getValue(node, "__USER__");
		String password = ElementParameterParser.getValue(node, "__PASS__");
		%>		
				
		de.sones.talend.helper.LitHelper litHelper = new de.sones.talend.helper.LitHelper();		
			
		String host = litHelper.trimSingleQuote("<%=host%>");
		String port = litHelper.trimSingleQuote("<%=port%>");
		String db = litHelper.trimSingleQuote("<%=db%>");
		String user  = litHelper.trimSingleQuote("<%=user%>");
		String password  = litHelper.trimSingleQuote("<%=password%>");
	
		
		try {
			
			java.net.URI uri = new java.net.URI("http://" + host + ":" + port);
			
			de.sones.GraphDSJavaClient.GraphDSJavaClient restClient = new de.sones.GraphDSJavaClient.GraphDSJavaClient(uri,user,password);
						
			de.sones.GraphDSJavaClient.Result.QueryResult result  = restClient.query(insertStr);
			
			if (result.getErrors().size() != 0)
			{
				for(de.sones.GraphDSJavaClient.Errors.IError error : result.getErrors())
				{
					System.err.println(error.getMessage());
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}	
	}
}


Sones_<%=cid%> sones_<%=cid%> = new Sones_<%=cid%>();

int nb_line_<%=cid%> = 0;